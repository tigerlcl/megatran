[
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/IBAN.json",
    "input": "CH9300762011623852957",
    "output": "CH93**********2957",
    "ground_truth": "CH93**********2957",
    "is_correct": "True",
    "instruction": "Mask IBAN numbers while keeping first 4 and last 4 digits visible.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: DE89370400440532013000\nOutput: DE89**********3000\nInput: GB29NWBK60161331926819\nOutput: GB29**********6819\nInput: FR1420041010050500013M02606\nOutput: FR14**********2606"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/IBAN.json",
    "input": "ES9121000418450200051332",
    "output": "ES91**********1332",
    "ground_truth": "ES91**********1332",
    "is_correct": "True",
    "instruction": "Mask IBAN numbers while keeping first 4 and last 4 digits visible.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: DE89370400440532013000\nOutput: DE89**********3000\nInput: GB29NWBK60161331926819\nOutput: GB29**********6819\nInput: FR1420041010050500013M02606\nOutput: FR14**********2606"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/ISIN_format.json",
    "input": "DE0005190003",
    "output": "DE-000519000-3",
    "ground_truth": "DE-000519000-3",
    "is_correct": "True",
    "instruction": "Format ISIN codes with hyphens for better readability.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: US0378331005\nOutput: US-037833100-5\nInput: GB0002374006\nOutput: GB-000237400-6\nInput: FR0000131104\nOutput: FR-000013110-4"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/ISIN_format.json",
    "input": "JP3633400001",
    "output": "JP-363340000-1",
    "ground_truth": "JP-363340000-1",
    "is_correct": "True",
    "instruction": "Format ISIN codes with hyphens for better readability.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: US0378331005\nOutput: US-037833100-5\nInput: GB0002374006\nOutput: GB-000237400-6\nInput: FR0000131104\nOutput: FR-000013110-4"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/credit_card.json",
    "input": "6011601160116611",
    "output": "Discover",
    "ground_truth": "Discover",
    "is_correct": "True",
    "instruction": "Identify credit card issuer based on card number prefix patterns (Visa: 4, Mastercard: 51-55, Amex: 34/37, Discover: 6011/644-649/65, JCB: 3528-3589, Diners: 300-305/36/38-39, UnionPay: 62).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4532015112830366\nOutput: Visa\nInput: 5424180123456789\nOutput: Mastercard\nInput: 347298412345678\nOutput: American Express"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/credit_card.json",
    "input": "3530111333300000",
    "output": "JCB",
    "ground_truth": "JCB",
    "is_correct": "True",
    "instruction": "Identify credit card issuer based on card number prefix patterns (Visa: 4, Mastercard: 51-55, Amex: 34/37, Discover: 6011/644-649/65, JCB: 3528-3589, Diners: 300-305/36/38-39, UnionPay: 62).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4532015112830366\nOutput: Visa\nInput: 5424180123456789\nOutput: Mastercard\nInput: 347298412345678\nOutput: American Express"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/credit_card.json",
    "input": "3852000023237",
    "output": "Diners Club",
    "ground_truth": "Diners Club",
    "is_correct": "True",
    "instruction": "Identify credit card issuer based on card number prefix patterns (Visa: 4, Mastercard: 51-55, Amex: 34/37, Discover: 6011/644-649/65, JCB: 3528-3589, Diners: 300-305/36/38-39, UnionPay: 62).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4532015112830366\nOutput: Visa\nInput: 5424180123456789\nOutput: Mastercard\nInput: 347298412345678\nOutput: American Express"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/credit_card.json",
    "input": "6250941006528599",
    "output": "UnionPay",
    "ground_truth": "UnionPay",
    "is_correct": "True",
    "instruction": "Identify credit card issuer based on card number prefix patterns (Visa: 4, Mastercard: 51-55, Amex: 34/37, Discover: 6011/644-649/65, JCB: 3528-3589, Diners: 300-305/36/38-39, UnionPay: 62).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4532015112830366\nOutput: Visa\nInput: 5424180123456789\nOutput: Mastercard\nInput: 347298412345678\nOutput: American Express"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/currency_symbol.json",
    "input": "EUR 299.99",
    "output": "€299,99",
    "ground_truth": "€299,99",
    "is_correct": "True",
    "instruction": "Convert amount to formatted currency notation with proper symbol and format (¥: Japan/China, €: EU, £: UK, ₹: India, ₣: Swiss, A$: Australia, R$: Brazil).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: JPY 12980\nOutput: ¥12,980\nInput: BRL 4599.90\nOutput: R$4.599,90\nInput: INR 149999\nOutput: ₹1,49,999"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/currency_symbol.json",
    "input": "GBP 1499.95",
    "output": "£1,499.95",
    "ground_truth": "£1,499.95",
    "is_correct": "True",
    "instruction": "Convert amount to formatted currency notation with proper symbol and format (¥: Japan/China, €: EU, £: UK, ₹: India, ₣: Swiss, A$: Australia, R$: Brazil).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: JPY 12980\nOutput: ¥12,980\nInput: BRL 4599.90\nOutput: R$4.599,90\nInput: INR 149999\nOutput: ₹1,49,999"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/currency_symbol.json",
    "input": "CNY 6999.90",
    "output": "¥6,999.90",
    "ground_truth": "¥6,999.90",
    "is_correct": "True",
    "instruction": "Convert amount to formatted currency notation with proper symbol and format (¥: Japan/China, €: EU, £: UK, ₹: India, ₣: Swiss, A$: Australia, R$: Brazil).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: JPY 12980\nOutput: ¥12,980\nInput: BRL 4599.90\nOutput: R$4.599,90\nInput: INR 149999\nOutput: ₹1,49,999"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/currency_symbol.json",
    "input": "CHF 459.90",
    "output": "₣459.90",
    "ground_truth": "₣459.90",
    "is_correct": "True",
    "instruction": "Convert amount to formatted currency notation with proper symbol and format (¥: Japan/China, €: EU, £: UK, ₹: India, ₣: Swiss, A$: Australia, R$: Brazil).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: JPY 12980\nOutput: ¥12,980\nInput: BRL 4599.90\nOutput: R$4.599,90\nInput: INR 149999\nOutput: ₹1,49,999"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/currency_symbol.json",
    "input": "AUD 749.95",
    "output": "A$749.95",
    "ground_truth": "A$749.95",
    "is_correct": "True",
    "instruction": "Convert amount to formatted currency notation with proper symbol and format (¥: Japan/China, €: EU, £: UK, ₹: India, ₣: Swiss, A$: Australia, R$: Brazil).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: JPY 12980\nOutput: ¥12,980\nInput: BRL 4599.90\nOutput: R$4.599,90\nInput: INR 149999\nOutput: ₹1,49,999"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/dealing.json",
    "input": "80% cash + 20% stock at $25/share",
    "output": "80% Cash | 20% Stock@$25",
    "ground_truth": "80% Cash | 20% Stock@$25",
    "is_correct": "True",
    "instruction": "Standardize deal consideration structure format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 60% cash + 40% stock at $50/share\nOutput: 60% Cash | 40% Stock@$50\nInput: 75% cash + 25% stock at $75/share\nOutput: 75% Cash | 25% Stock@$75\nInput: 50% cash + 50% stock at $100/share\nOutput: 50% Cash | 50% Stock@$100"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/dealing.json",
    "input": "70% cash + 30% stock at $60/share",
    "output": "70% Cash | 30% Stock@$60",
    "ground_truth": "70% Cash | 30% Stock@$60",
    "is_correct": "True",
    "instruction": "Standardize deal consideration structure format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 60% cash + 40% stock at $50/share\nOutput: 60% Cash | 40% Stock@$50\nInput: 75% cash + 25% stock at $75/share\nOutput: 75% Cash | 25% Stock@$75\nInput: 50% cash + 50% stock at $100/share\nOutput: 50% Cash | 50% Stock@$100"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/finance_number.json",
    "input": "123.456",
    "output": "123.46",
    "ground_truth": "123.46",
    "is_correct": "True",
    "instruction": "Round and format financial statement numbers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1234.567\nOutput: 1,234.57\nInput: 9876543.219\nOutput: 9,876,543.22\nInput: 45678.901\nOutput: 45,678.90"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/finance_number.json",
    "input": "1000000.999",
    "output": "1,000,001.00",
    "ground_truth": "1,000,001.00",
    "is_correct": "True",
    "instruction": "Round and format financial statement numbers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1234.567\nOutput: 1,234.57\nInput: 9876543.219\nOutput: 9,876,543.22\nInput: 45678.901\nOutput: 45,678.90"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/installment.json",
    "input": "Monthly payment $50,000 (principal: $37,500, interest: $12,500)",
    "output": "PMT: $50k (P:37.5k, I:12.5k)",
    "ground_truth": "PMT: $50k (P:37.5k, I:12.5k)",
    "is_correct": "True",
    "instruction": "Format installment breakdown with abbreviated amounts.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Monthly payment $10,000 (principal: $7,500, interest: $2,500)\nOutput: PMT: $10k (P:7.5k, I:2.5k)\nInput: Monthly payment $25,000 (principal: $18,000, interest: $7,000)\nOutput: PMT: $25k (P:18k, I:7k)\nInput: Monthly payment $15,000 (principal: $11,250, interest: $3,750)\nOutput: PMT: $15k (P:11.25k, I:3.75k)"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/installment.json",
    "input": "Monthly payment $8,000 (principal: $6,000, interest: $2,000)",
    "output": "PMT: $8k (P:6k, I:2k)",
    "ground_truth": "PMT: $8k (P:6k, I:2k)",
    "is_correct": "True",
    "instruction": "Format installment breakdown with abbreviated amounts.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Monthly payment $10,000 (principal: $7,500, interest: $2,500)\nOutput: PMT: $10k (P:7.5k, I:2.5k)\nInput: Monthly payment $25,000 (principal: $18,000, interest: $7,000)\nOutput: PMT: $25k (P:18k, I:7k)\nInput: Monthly payment $15,000 (principal: $11,250, interest: $3,750)\nOutput: PMT: $15k (P:11.25k, I:3.75k)"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/interest_rate.json",
    "input": "Prime Rate + 300 basis points",
    "output": "PR+300bps",
    "ground_truth": "PR+300bps",
    "is_correct": "True",
    "instruction": "Convert interest rate expressions to internal code format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Prime Rate + 200 basis points\nOutput: PR+200bps\nInput: Prime Rate + 150 basis points\nOutput: PR+150bps\nInput: Prime Rate + 75 basis points\nOutput: PR+75bps"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/interest_rate.json",
    "input": "Prime Rate + 125 basis points",
    "output": "PR+125bps",
    "ground_truth": "PR+125bps",
    "is_correct": "True",
    "instruction": "Convert interest rate expressions to internal code format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Prime Rate + 200 basis points\nOutput: PR+200bps\nInput: Prime Rate + 150 basis points\nOutput: PR+150bps\nInput: Prime Rate + 75 basis points\nOutput: PR+75bps"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/loan.json",
    "input": "Loan-to-Value Ratio 70% with 7-year amortization",
    "output": "LTV 70% | 7Y AMORT",
    "ground_truth": "LTV 70% | 7Y AMORT",
    "is_correct": "True",
    "instruction": "Convert loan terms to standardized abbreviated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Loan-to-Value Ratio 75% with 5-year amortization\nOutput: LTV 75% | 5Y AMORT\nInput: Loan-to-Value Ratio 80% with 10-year amortization\nOutput: LTV 80% | 10Y AMORT\nInput: Loan-to-Value Ratio 65% with 3-year amortization\nOutput: LTV 65% | 3Y AMORT"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/loan.json",
    "input": "Loan-to-Value Ratio 85% with 15-year amortization",
    "output": "LTV 85% | 15Y AMORT",
    "ground_truth": "LTV 85% | 15Y AMORT",
    "is_correct": "True",
    "instruction": "Convert loan terms to standardized abbreviated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Loan-to-Value Ratio 75% with 5-year amortization\nOutput: LTV 75% | 5Y AMORT\nInput: Loan-to-Value Ratio 80% with 10-year amortization\nOutput: LTV 80% | 10Y AMORT\nInput: Loan-to-Value Ratio 65% with 3-year amortization\nOutput: LTV 65% | 3Y AMORT"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/m_a.json",
    "input": "Q2 2025 closing with 18-month integration",
    "output": "Close: Q2'25 | Integrate: 18M",
    "ground_truth": "Close: Q2'25 | Integrate: 18M",
    "is_correct": "True",
    "instruction": "Convert M&A timeline descriptions to abbreviated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: H2 2024 closing with 6-month integration\nOutput: Close: H2'24 | Integrate: 6M\nInput: H1 2025 closing with 12-month integration\nOutput: Close: H1'25 | Integrate: 12M\nInput: Q4 2024 closing with 9-month integration\nOutput: Close: Q4'24 | Integrate: 9M"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/m_a.json",
    "input": "H1 2024 closing with 24-month integration",
    "output": "Close: H1'24 | Integrate: 24M",
    "ground_truth": "Close: H1'24 | Integrate: 24M",
    "is_correct": "True",
    "instruction": "Convert M&A timeline descriptions to abbreviated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: H2 2024 closing with 6-month integration\nOutput: Close: H2'24 | Integrate: 6M\nInput: H1 2025 closing with 12-month integration\nOutput: Close: H1'25 | Integrate: 12M\nInput: Q4 2024 closing with 9-month integration\nOutput: Close: Q4'24 | Integrate: 9M"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/orderdate.json",
    "input": "ORD-20240229-98765",
    "output": "February 29, 2024",
    "ground_truth": "February 29, 2024",
    "is_correct": "True",
    "instruction": "Extract and format date from order reference number (Format: ORD-YYYYMMDD-XXXXX or PORD-YYYYMMDD-XXXXX for pre-orders).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: ORD-20240315-12345\nOutput: March 15, 2024\nInput: PORD-20231225-78901\nOutput: December 25, 2023\nInput: ORD-20240401-45678\nOutput: April 1, 2024"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/orderdate.json",
    "input": "PORD-20240630-24680",
    "output": "June 30, 2024",
    "ground_truth": "June 30, 2024",
    "is_correct": "True",
    "instruction": "Extract and format date from order reference number (Format: ORD-YYYYMMDD-XXXXX or PORD-YYYYMMDD-XXXXX for pre-orders).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: ORD-20240315-12345\nOutput: March 15, 2024\nInput: PORD-20231225-78901\nOutput: December 25, 2023\nInput: ORD-20240401-45678\nOutput: April 1, 2024"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/promocode.json",
    "input": "Limited time offer! Get your 20% student discount with STUDENT20. Terms apply.",
    "output": "STUDENT20",
    "ground_truth": "STUDENT20",
    "is_correct": "True",
    "instruction": "Extract promotional code from advertisement text (codes are typically in CAPS, may contain numbers, and are often at the end of sentences).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Shop our summer collection and get 25% off with code SUMMER2024 at checkout!\nOutput: SUMMER2024\nInput: 🎉 Flash sale alert! Use FLASH48 for an extra 30% off clearance items\nOutput: FLASH48\nInput: Members: Enjoy free shipping on all orders - simply enter SHIPFREE at checkout\nOutput: SHIPFREE"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/promocode.json",
    "input": "Early bird special: Use promo code EARLY15 before 9AM for an additional 15% off",
    "output": "EARLY15",
    "ground_truth": "EARLY15",
    "is_correct": "True",
    "instruction": "Extract promotional code from advertisement text (codes are typically in CAPS, may contain numbers, and are often at the end of sentences).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Shop our summer collection and get 25% off with code SUMMER2024 at checkout!\nOutput: SUMMER2024\nInput: 🎉 Flash sale alert! Use FLASH48 for an extra 30% off clearance items\nOutput: FLASH48\nInput: Members: Enjoy free shipping on all orders - simply enter SHIPFREE at checkout\nOutput: SHIPFREE"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/promocode.json",
    "input": "Subscribe to our newsletter and use welcome code WELCOME10 for 10% off your first order!",
    "output": "WELCOME10",
    "ground_truth": "WELCOME10",
    "is_correct": "True",
    "instruction": "Extract promotional code from advertisement text (codes are typically in CAPS, may contain numbers, and are often at the end of sentences).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Shop our summer collection and get 25% off with code SUMMER2024 at checkout!\nOutput: SUMMER2024\nInput: 🎉 Flash sale alert! Use FLASH48 for an extra 30% off clearance items\nOutput: FLASH48\nInput: Members: Enjoy free shipping on all orders - simply enter SHIPFREE at checkout\nOutput: SHIPFREE"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/promocode.json",
    "input": "Black Friday deals start early! Don't forget to apply BFCM2023 for maximum savings",
    "output": "BFCM2023",
    "ground_truth": "BFCM2023",
    "is_correct": "True",
    "instruction": "Extract promotional code from advertisement text (codes are typically in CAPS, may contain numbers, and are often at the end of sentences).\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Shop our summer collection and get 25% off with code SUMMER2024 at checkout!\nOutput: SUMMER2024\nInput: 🎉 Flash sale alert! Use FLASH48 for an extra 30% off clearance items\nOutput: FLASH48\nInput: Members: Enjoy free shipping on all orders - simply enter SHIPFREE at checkout\nOutput: SHIPFREE"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/stock_code.json",
    "input": "Semiconductor equipment maker AMAT reported earnings while KLAC and LRCX remain under pressure from export restrictions",
    "output": "AMAT, KLAC, LRCX",
    "ground_truth": "AMAT, KLAC, LRCX",
    "is_correct": "True",
    "instruction": "Extract stock symbols from text.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Despite market volatility, Costco Wholesale (COST) and Lockheed Martin (LMT) maintained stable performance throughout Q3\nOutput: COST, LMT\nInput: Healthcare stocks UnitedHealth Group (UNH) and Intuitive Surgical (ISRG) showed promising growth in emerging markets\nOutput: UNH, ISRG\nInput: Analysts are closely watching VMW and ADSK after recent software industry consolidation news\nOutput: VMW, ADSK"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/stock_code.json",
    "input": "In the biotech sector, Regeneron Pharmaceuticals (REGN) and Vertex Pharmaceuticals (VRTX) announced breakthrough research results",
    "output": "REGN, VRTX",
    "ground_truth": "REGN, VRTX",
    "is_correct": "True",
    "instruction": "Extract stock symbols from text.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Despite market volatility, Costco Wholesale (COST) and Lockheed Martin (LMT) maintained stable performance throughout Q3\nOutput: COST, LMT\nInput: Healthcare stocks UnitedHealth Group (UNH) and Intuitive Surgical (ISRG) showed promising growth in emerging markets\nOutput: UNH, ISRG\nInput: Analysts are closely watching VMW and ADSK after recent software industry consolidation news\nOutput: VMW, ADSK"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/sumergy_projection.json",
    "input": "$75M cost synergies (20% Month 3, 45% Month 6, 70% Month 9, 100% Month 12)",
    "output": "Synergy: $75M (M3:20% | M6:45% | M9:70% | M12:100%)",
    "ground_truth": "Synergy: $75M (M3:20% | M6:45% | M9:70% | M12:100%)",
    "is_correct": "True",
    "instruction": "Format synergy projections in abbreviated notation with various time patterns.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: $100M cost synergies (50% realized in Year 1, 100% by Year 3)\nOutput: Synergy: $100M (Y1:50% | Y3:100%)\nInput: $250M cost synergies (30% in Year 1, 60% in Year 2, Full by Year 3)\nOutput: Synergy: $250M (Y1:30% | Y2:60% | Y3:100%)\nInput: $150M cost synergies (40% H1, 75% by year-end)\nOutput: Synergy: $150M (H1:40% | YE:75%)"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/sumergy_projection.json",
    "input": "$300M cost synergies (10% Month 1, 30% Month 3, 50% Month 6, 80% Month 9, Full by Month 12)",
    "output": "Synergy: $300M (M1:10% | M3:30% | M6:50% | M9:80%",
    "ground_truth": "Synergy: $300M (M1:10% | M3:30% | M6:50% | M9:80% | M12:100%)",
    "is_correct": "False",
    "instruction": "Format synergy projections in abbreviated notation with various time patterns.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: $100M cost synergies (50% realized in Year 1, 100% by Year 3)\nOutput: Synergy: $100M (Y1:50% | Y3:100%)\nInput: $250M cost synergies (30% in Year 1, 60% in Year 2, Full by Year 3)\nOutput: Synergy: $250M (Y1:30% | Y2:60% | Y3:100%)\nInput: $150M cost synergies (40% H1, 75% by year-end)\nOutput: Synergy: $150M (H1:40% | YE:75%)"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/transaction_status.json",
    "input": "[Cancelled] Order cancellation confirmation #34567",
    "output": "Cancelled",
    "ground_truth": "Cancelled",
    "is_correct": "True",
    "instruction": "Extract transaction status from email subject lines\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: [Completed] Your order #12345 has been successfully processed\nOutput: Completed\nInput: [Refunded] Refund processed for your recent order #45678\nOutput: Refunded\nInput: [Pending] Awaiting payment confirmation for order #98765\nOutput: Pending"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/transaction_status.json",
    "input": "[Failed] Payment unsuccessful for order #23456",
    "output": "Failed",
    "ground_truth": "Failed",
    "is_correct": "True",
    "instruction": "Extract transaction status from email subject lines\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: [Completed] Your order #12345 has been successfully processed\nOutput: Completed\nInput: [Refunded] Refund processed for your recent order #45678\nOutput: Refunded\nInput: [Pending] Awaiting payment confirmation for order #98765\nOutput: Pending"
  },
  {
    "file_path": "/home/yangchenyu/tiger/megatran/data/industry/Finance/transaction_status.json",
    "input": "[Disputed] Chargeback notice for transaction #78901",
    "output": "Disputed",
    "ground_truth": "Disputed",
    "is_correct": "True",
    "instruction": "Extract transaction status from email subject lines\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: [Completed] Your order #12345 has been successfully processed\nOutput: Completed\nInput: [Refunded] Refund processed for your recent order #45678\nOutput: Refunded\nInput: [Pending] Awaiting payment confirmation for order #98765\nOutput: Pending"
  }
]