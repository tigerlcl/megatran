[
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/chemical.json",
    "input": "K4[Fe(CN)6]",
    "output": "368",
    "ground_truth": "368",
    "is_correct": "True",
    "instruction": "Calculate the molar mass of the given chemical formula, and retain only the integer part.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: H2O\nOutput: 18\nInput: C6H12O6\nOutput: 180\nInput: Al2(SO4)3\nOutput: 342"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/chemical.json",
    "input": "(CH3)2CHOH",
    "output": "60",
    "ground_truth": "60",
    "is_correct": "True",
    "instruction": "Calculate the molar mass of the given chemical formula, and retain only the integer part.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: H2O\nOutput: 18\nInput: C6H12O6\nOutput: 180\nInput: Al2(SO4)3\nOutput: 342"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/chemical.json",
    "input": "Fe3[Fe(CN)6]2",
    "output": "859",
    "ground_truth": "591",
    "is_correct": "False",
    "instruction": "Calculate the molar mass of the given chemical formula, and retain only the integer part.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: H2O\nOutput: 18\nInput: C6H12O6\nOutput: 180\nInput: Al2(SO4)3\nOutput: 342"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/date.json",
    "input": "July 4th, 1776 at noon",
    "output": "1776-07-04T12:00:00+00:00",
    "ground_truth": "1776-07-04T12:00:00",
    "is_correct": "False",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Martes 21 de Octubre de 2014\nOutput: 2014-10-21T00:00:00+00:00\nInput: Monday, 02-Jan-06 15:04:05 MST\nOutput: 2006-01-02T22:04:05+00:00\nInput: 2012-08-03 18:31:59.257000000\nOutput: 2012-08-03T18:31:59.257000+00:00"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/date.json",
    "input": "1 เดือนตุลาคม 2005, 1:00 AM",
    "output": "2005-10-01T01:00:00+00:00",
    "ground_truth": "2005-10-01T01:00:00+00:00",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Martes 21 de Octubre de 2014\nOutput: 2014-10-21T00:00:00+00:00\nInput: Monday, 02-Jan-06 15:04:05 MST\nOutput: 2006-01-02T22:04:05+00:00\nInput: 2012-08-03 18:31:59.257000000\nOutput: 2012-08-03T18:31:59.257000+00:00"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/date.json",
    "input": "2023-10-05 15:30 CST",
    "output": "2023-10-05T21:30:00+00:00",
    "ground_truth": "2023-10-05T21:30:00+00:00",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Martes 21 de Octubre de 2014\nOutput: 2014-10-21T00:00:00+00:00\nInput: Monday, 02-Jan-06 15:04:05 MST\nOutput: 2006-01-02T22:04:05+00:00\nInput: 2012-08-03 18:31:59.257000000\nOutput: 2012-08-03T18:31:59.257000+00:00"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/days.json",
    "input": "1900/12/23",
    "output": "206",
    "ground_truth": "358",
    "is_correct": "False",
    "instruction": "Convert date to days.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 2020/4/17\nOutput: 43938\nInput: 1906/6/23\nOutput: 2366\nInput: 1912/12/19\nOutput: 4737"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/days.json",
    "input": "1959/10/12",
    "output": "21753",
    "ground_truth": "21835",
    "is_correct": "False",
    "instruction": "Convert date to days.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 2020/4/17\nOutput: 43938\nInput: 1906/6/23\nOutput: 2366\nInput: 1912/12/19\nOutput: 4737"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/degree.json",
    "input": "45 Degrees",
    "output": "100%",
    "ground_truth": "100%",
    "is_correct": "True",
    "instruction": "Convert the given slope angle in degrees to slope percentage.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 13.5 Degrees\nOutput: 24%\nInput: 5.71 Degrees\nOutput: 10%\nInput: 26.57 Degrees\nOutput: 50%"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/degree.json",
    "input": "2.86 Degrees",
    "output": "5%",
    "ground_truth": "5%",
    "is_correct": "True",
    "instruction": "Convert the given slope angle in degrees to slope percentage.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 13.5 Degrees\nOutput: 24%\nInput: 5.71 Degrees\nOutput: 10%\nInput: 26.57 Degrees\nOutput: 50%"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/degree.json",
    "input": "36.87 Degrees",
    "output": "75%",
    "ground_truth": "75%",
    "is_correct": "True",
    "instruction": "Convert the given slope angle in degrees to slope percentage.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 13.5 Degrees\nOutput: 24%\nInput: 5.71 Degrees\nOutput: 10%\nInput: 26.57 Degrees\nOutput: 50%"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/degree.json",
    "input": "56.31 Degrees",
    "output": "150%",
    "ground_truth": "150%",
    "is_correct": "True",
    "instruction": "Convert the given slope angle in degrees to slope percentage.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 13.5 Degrees\nOutput: 24%\nInput: 5.71 Degrees\nOutput: 10%\nInput: 26.57 Degrees\nOutput: 50%"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/excel_date.json",
    "input": "2358",
    "output": "1906/6/26",
    "ground_truth": "1906/6/15",
    "is_correct": "False",
    "instruction": "Convert excel date to datetime.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4938\nOutput: 1913/7/8\nInput: 236\nOutput: 1900/8/23\nInput: 47378\nOutput: 2029/9/17"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/excel_date.json",
    "input": "21835",
    "output": "1960/9/10",
    "ground_truth": "1959/10/12",
    "is_correct": "False",
    "instruction": "Convert excel date to datetime.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 4938\nOutput: 1913/7/8\nInput: 236\nOutput: 1900/8/23\nInput: 47378\nOutput: 2029/9/17"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-1.json",
    "input": "48°51'29\"N, 2°17'40\"E",
    "output": "48.858, 2.294",
    "ground_truth": "48.858, 2.294",
    "is_correct": "True",
    "instruction": "Convert the input from DMS format to WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 34°25'20\"N, 108°56'50\"E\nOutput: 34.422, 108.947\nInput: 25°30'20\"N, 80°0'10\"W\nOutput: 25.506, -80.003\nInput: 40°44'55\"N, 73°59'11\"W\nOutput: 40.749, -73.986"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-1.json",
    "input": "51°28'40\"N, 0°0'5\"W",
    "output": "51.478, -0.001",
    "ground_truth": "51.478, -0.001",
    "is_correct": "True",
    "instruction": "Convert the input from DMS format to WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 34°25'20\"N, 108°56'50\"E\nOutput: 34.422, 108.947\nInput: 25°30'20\"N, 80°0'10\"W\nOutput: 25.506, -80.003\nInput: 40°44'55\"N, 73°59'11\"W\nOutput: 40.749, -73.986"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-2.json",
    "input": "10S X 360000 E 8400000",
    "output": "-9.003, -68.383",
    "ground_truth": "-14.469, -124.299",
    "is_correct": "False",
    "instruction": "Convert the input string to a latitude and longitude in WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 19S U 452000 E 3575000\nOutput: -57.964, -69.811\nInput: 36N J 700000 E 4200000\nOutput: 37.926, 35.276\nInput: 33T Q 500000 E 1000000\nOutput: -81.061, 15.000"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-2.json",
    "input": "12N M 650000 E 2000000",
    "output": "18.050, -59.582",
    "ground_truth": "18.084, -109.583",
    "is_correct": "False",
    "instruction": "Convert the input string to a latitude and longitude in WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 19S U 452000 E 3575000\nOutput: -57.964, -69.811\nInput: 36N J 700000 E 4200000\nOutput: 37.926, 35.276\nInput: 33T Q 500000 E 1000000\nOutput: -81.061, 15.000"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-3.json",
    "input": "19SGB123456",
    "output": "28.037, -88.585",
    "ground_truth": "37.433, -66.6",
    "is_correct": "False",
    "instruction": "Convert the input to WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 18SUJ123456\nOutput: 39.239, -77.175\nInput: 33TWN123456\nOutput: 47.364, 15.163\nInput: 11SJB123456\nOutput: 37.376, -121.378"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-4.json",
    "input": "-33.8688, 151.2093",
    "output": "UTM Easting: 334725mE, UTM Northing: 6251937mN, Zone: 56H",
    "ground_truth": "UTM Easting: 334368mE, UTM Northing: 6250948mN, Zone: 56H",
    "is_correct": "False",
    "instruction": "Convert latitude and longitude coordinates to UTM format, rounded to integers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 23.11, 39.33\nOutput: UTM Easting: 533791mE, UTM Northing: 2555735mN, Zone: 37Q\nInput: 34.05, -118.25\nOutput: UTM Easting: 384629mE, UTM Northing: 3768404mN, Zone: 11S\nInput: 51.5074, -0.1278\nOutput: UTM Easting: 699316mE, UTM Northing: 5710163mN, Zone: 30U"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-4.json",
    "input": "40.7128, -74.006",
    "output": "UTM Easting: 583960mE, UTM Northing: 4507523mN, Zone: 18T",
    "ground_truth": "UTM Easting: 583959mE, UTM Northing: 4507350mN, Zone: 18T",
    "is_correct": "False",
    "instruction": "Convert latitude and longitude coordinates to UTM format, rounded to integers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 23.11, 39.33\nOutput: UTM Easting: 533791mE, UTM Northing: 2555735mN, Zone: 37Q\nInput: 34.05, -118.25\nOutput: UTM Easting: 384629mE, UTM Northing: 3768404mN, Zone: 11S\nInput: 51.5074, -0.1278\nOutput: UTM Easting: 699316mE, UTM Northing: 5710163mN, Zone: 30U"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-5.json",
    "input": "772181mE, 3753637mN, 32S",
    "output": "33.61, 14.17",
    "ground_truth": "33.888, 11.943",
    "is_correct": "False",
    "instruction": "Convert UTM to latitude and longitude format, keep 2 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 655957mE, 5887044mN, 40U\nOutput: 53.11, 59.33\nInput: 634236mE, 7105483mN, 27W\nOutput: 64.05, -18.25\nInput: 729981mE, 2379495mN, 29Q\nOutput: 21.5034, -6.78"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/geo-5.json",
    "input": "397424mE, 7631951mN, 40W",
    "output": "68.77, -112.48",
    "ground_truth": "68.78, 54.46",
    "is_correct": "False",
    "instruction": "Convert UTM to latitude and longitude format, keep 2 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 655957mE, 5887044mN, 40U\nOutput: 53.11, 59.33\nInput: 634236mE, 7105483mN, 27W\nOutput: 64.05, -18.25\nInput: 729981mE, 2379495mN, 29Q\nOutput: 21.5034, -6.78"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/gregorian.json",
    "input": "September 2009 C.E.",
    "output": "Ramadan 1430",
    "ground_truth": "Shawwal 1430",
    "is_correct": "False",
    "instruction": "Convert the gregorian date to hijri date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Friday, 20 August 2038 C.E.\nOutput: 19 Rajab 1460\nInput: July 2023 C.E.\nOutput: Muharram 1445\nInput: January 2029 C.E.\nOutput: Ramadan 1450"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/gregorian.json",
    "input": "25 April 2014 C.E.",
    "output": "25 Jumada al-Thani 1435",
    "ground_truth": "25 Jumada al-Thani 1435",
    "is_correct": "True",
    "instruction": "Convert the gregorian date to hijri date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Friday, 20 August 2038 C.E.\nOutput: 19 Rajab 1460\nInput: July 2023 C.E.\nOutput: Muharram 1445\nInput: January 2029 C.E.\nOutput: Ramadan 1450"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/gregorian.json",
    "input": "October 2043 C.E.",
    "output": "Sha'ban 1465",
    "ground_truth": "Dhul-Qadah 1465",
    "is_correct": "False",
    "instruction": "Convert the gregorian date to hijri date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Friday, 20 August 2038 C.E.\nOutput: 19 Rajab 1460\nInput: July 2023 C.E.\nOutput: Muharram 1445\nInput: January 2029 C.E.\nOutput: Ramadan 1450"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hex.json",
    "input": "FF",
    "output": "255",
    "ground_truth": "255",
    "is_correct": "True",
    "instruction": "Convert the given hex number to decimal number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1E162\nOutput: 123234\nInput: A1F\nOutput: 2591\nInput: 3D7A\nOutput: 15738"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hex.json",
    "input": "2B4C",
    "output": "11084",
    "ground_truth": "11084",
    "is_correct": "True",
    "instruction": "Convert the given hex number to decimal number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1E162\nOutput: 123234\nInput: A1F\nOutput: 2591\nInput: 3D7A\nOutput: 15738"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hex.json",
    "input": "C0DE",
    "output": "49374",
    "ground_truth": "49374",
    "is_correct": "True",
    "instruction": "Convert the given hex number to decimal number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1E162\nOutput: 123234\nInput: A1F\nOutput: 2591\nInput: 3D7A\nOutput: 15738"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hijri.json",
    "input": "Shawwal 1430",
    "output": "October 2009 C.E.",
    "ground_truth": "September 2009 C.E.",
    "is_correct": "False",
    "instruction": "Convert the given hijri date to gregorian date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 19 Rajab 1460\nOutput: Friday, 20 August 2038 C.E.\nInput: Muharram 1445\nOutput: July 2023 C.E.\nInput: Ramadan 1450\nOutput: January 2029 C.E."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hijri.json",
    "input": "25 Jumada al-Thani 1435",
    "output": "Saturday, 26 April 2014 C.E.",
    "ground_truth": "25 April 2014 C.E.",
    "is_correct": "False",
    "instruction": "Convert the given hijri date to gregorian date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 19 Rajab 1460\nOutput: Friday, 20 August 2038 C.E.\nInput: Muharram 1445\nOutput: July 2023 C.E.\nInput: Ramadan 1450\nOutput: January 2029 C.E."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/hijri.json",
    "input": "Dhul-Qadah 1465",
    "output": "August 2043 C.E.",
    "ground_truth": "October 2043 C.E.",
    "is_correct": "False",
    "instruction": "Convert the given hijri date to gregorian date.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 19 Rajab 1460\nOutput: Friday, 20 August 2038 C.E.\nInput: Muharram 1445\nOutput: July 2023 C.E.\nInput: Ramadan 1450\nOutput: January 2029 C.E."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/inches.json",
    "input": "89 cm",
    "output": "2 feet and 11.0303 inches",
    "ground_truth": "2 feet and 11.0394 inches",
    "is_correct": "False",
    "instruction": "Convert the given length from centimeters (cm) to feet and inches.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 170 cm\nOutput: 5 feet and 6.9291 inches\nInput: 200 cm\nOutput: 6 feet and 6.7402 inches\nInput: 50 cm\nOutput: 1 feet and 7.6850 inches"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/inches.json",
    "input": "134 cm",
    "output": "4 feet and 4.8031 inches",
    "ground_truth": "4 feet and 4.7559 inches",
    "is_correct": "False",
    "instruction": "Convert the given length from centimeters (cm) to feet and inches.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 170 cm\nOutput: 5 feet and 6.9291 inches\nInput: 200 cm\nOutput: 6 feet and 6.7402 inches\nInput: 50 cm\nOutput: 1 feet and 7.6850 inches"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/inches.json",
    "input": "41 cm",
    "output": "1 feet and 4.1417 inches",
    "ground_truth": "1 feet and 4.1417 inches",
    "is_correct": "True",
    "instruction": "Convert the given length from centimeters (cm) to feet and inches.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 170 cm\nOutput: 5 feet and 6.9291 inches\nInput: 200 cm\nOutput: 6 feet and 6.7402 inches\nInput: 50 cm\nOutput: 1 feet and 7.6850 inches"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/ip-address.json",
    "input": "127.0.0.1",
    "output": "::7f00:1",
    "ground_truth": "::7f00:1",
    "is_correct": "True",
    "instruction": "Convert the input IPV4 address to IPV6 address.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 192.168.0.1\nOutput: ::c0a8:1\nInput: 10.0.0.1\nOutput: ::a00:1\nInput: 172.16.0.1\nOutput: ::ac10:1"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/ip-address.json",
    "input": "192.0.2.1",
    "output": "::c000:201",
    "ground_truth": "::c000:201",
    "is_correct": "True",
    "instruction": "Convert the input IPV4 address to IPV6 address.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 192.168.0.1\nOutput: ::c0a8:1\nInput: 10.0.0.1\nOutput: ::a00:1\nInput: 172.16.0.1\nOutput: ::ac10:1"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/ip-address.json",
    "input": "203.0.113.5",
    "output": "::cb00:7105",
    "ground_truth": "::cb00:7105",
    "is_correct": "True",
    "instruction": "Convert the input IPV4 address to IPV6 address.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 192.168.0.1\nOutput: ::c0a8:1\nInput: 10.0.0.1\nOutput: ::a00:1\nInput: 172.16.0.1\nOutput: ::ac10:1"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/ip-address.json",
    "input": "192.168.1.1",
    "output": "::c0a8:101",
    "ground_truth": "::c0a8:101",
    "is_correct": "True",
    "instruction": "Convert the input IPV4 address to IPV6 address.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 192.168.0.1\nOutput: ::c0a8:1\nInput: 10.0.0.1\nOutput: ::a00:1\nInput: 172.16.0.1\nOutput: ::ac10:1"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/ip-address.json",
    "input": "198.51.100.9",
    "output": "::c633:6409",
    "ground_truth": "::c633:6409",
    "is_correct": "True",
    "instruction": "Convert the input IPV4 address to IPV6 address.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 192.168.0.1\nOutput: ::c0a8:1\nInput: 10.0.0.1\nOutput: ::a00:1\nInput: 172.16.0.1\nOutput: ::ac10:1"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/mph.json",
    "input": "23.2",
    "output": "10.37 m/s",
    "ground_truth": "10.37 m/s",
    "is_correct": "True",
    "instruction": "convert mph to mps, round to 2 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 26.84324\nOutput: 12.00 m/s\nInput: 10\nOutput: 4.47 m/s\nInput: 60\nOutput: 26.82 m/s"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/mph.json",
    "input": "64.4",
    "output": "28.78 m/s",
    "ground_truth": "28.79 m/s",
    "is_correct": "False",
    "instruction": "convert mph to mps, round to 2 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 26.84324\nOutput: 12.00 m/s\nInput: 10\nOutput: 4.47 m/s\nInput: 60\nOutput: 26.82 m/s"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/mph.json",
    "input": "4.49",
    "output": "2.01 m/s",
    "ground_truth": "2.01 m/s",
    "is_correct": "True",
    "instruction": "convert mph to mps, round to 2 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 26.84324\nOutput: 12.00 m/s\nInput: 10\nOutput: 4.47 m/s\nInput: 60\nOutput: 26.82 m/s"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/octal.json",
    "input": "6421",
    "output": "3345",
    "ground_truth": "3345",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1234\nOutput: 668\nInput: 643\nOutput: 419\nInput: 1643\nOutput: 931"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/octal.json",
    "input": "323",
    "output": "211",
    "ground_truth": "211",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1234\nOutput: 668\nInput: 643\nOutput: 419\nInput: 1643\nOutput: 931"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/octal.json",
    "input": "555",
    "output": "365",
    "ground_truth": "365",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 1234\nOutput: 668\nInput: 643\nOutput: 419\nInput: 1643\nOutput: 931"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/pounds.json",
    "input": "0lb 8oz",
    "output": "227g",
    "ground_truth": "227g",
    "is_correct": "True",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 0lb 1.128767oz\nOutput: 32g\nInput: 1lb 0oz\nOutput: 454g\nInput: 2lb 3.527396oz\nOutput: 1007g"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/pounds.json",
    "input": "5lb 10oz",
    "output": "2552g",
    "ground_truth": "2551g",
    "is_correct": "False",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 0lb 1.128767oz\nOutput: 32g\nInput: 1lb 0oz\nOutput: 454g\nInput: 2lb 3.527396oz\nOutput: 1007g"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/pounds.json",
    "input": "3lb 5.643835oz",
    "output": "1508g",
    "ground_truth": "1521g",
    "is_correct": "False",
    "instruction": "convert octal to decimal.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 0lb 1.128767oz\nOutput: 32g\nInput: 1lb 0oz\nOutput: 454g\nInput: 2lb 3.527396oz\nOutput: 1007g"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/rectangular.json",
    "input": "(-1.00, 1.73)",
    "output": "(2, 120)",
    "ground_truth": "(2, 120)",
    "is_correct": "True",
    "instruction": "Convert rectangular coordinate tuples (x, y) to polar format (r, θ) with both values rounded to integers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: (4.33, 2.50)\nOutput: (5, 30)\nInput: (2.12, 2.12)\nOutput: (3, 45)\nInput: (0.00, 6.00)\nOutput: (6, 90)"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/rectangular.json",
    "input": "(5.00, 8.66)",
    "output": "(10, 60)",
    "ground_truth": "(10, 60)",
    "is_correct": "True",
    "instruction": "Convert rectangular coordinate tuples (x, y) to polar format (r, θ) with both values rounded to integers.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: (4.33, 2.50)\nOutput: (5, 30)\nInput: (2.12, 2.12)\nOutput: (3, 45)\nInput: (0.00, 6.00)\nOutput: (6, 90)"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/romans.json",
    "input": "DCCCXLV",
    "output": "845",
    "ground_truth": "845",
    "is_correct": "True",
    "instruction": "Convert the input to WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: MCMXC\nOutput: 1990\nInput: MMXIV\nOutput: 2014\nInput: CDXLIV\nOutput: 444"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/romans.json",
    "input": "MMMCMXCIX",
    "output": "3999",
    "ground_truth": "3999",
    "is_correct": "True",
    "instruction": "Convert the input to WGS84 format, keep 3 decimal places.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: MCMXC\nOutput: 1990\nInput: MMXIV\nOutput: 2014\nInput: CDXLIV\nOutput: 444"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/time.json",
    "input": "15:45:30",
    "output": "15.7583 hours",
    "ground_truth": "15.7583 hours",
    "is_correct": "True",
    "instruction": "Transform the input to hours.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 08:00:45\nOutput: 8.0125 hours\nInput: 00:30:00\nOutput: 0.5 hours\nInput: 12:34:56\nOutput: 12.5822 hours"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/time.json",
    "input": "14:10:20",
    "output": "14.1722 hours",
    "ground_truth": "14.1722 hours",
    "is_correct": "True",
    "instruction": "Transform the input to hours.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 08:00:45\nOutput: 8.0125 hours\nInput: 00:30:00\nOutput: 0.5 hours\nInput: 12:34:56\nOutput: 12.5822 hours"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/time.json",
    "input": "19:16:32",
    "output": "19.2756 hours",
    "ground_truth": "19.2756 hours",
    "is_correct": "True",
    "instruction": "Transform the input to hours.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 08:00:45\nOutput: 8.0125 hours\nInput: 00:30:00\nOutput: 0.5 hours\nInput: 12:34:56\nOutput: 12.5822 hours"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/Manual/time.json",
    "input": "09:14:23",
    "output": "9.2397 hours",
    "ground_truth": "9.2397 hours",
    "is_correct": "True",
    "instruction": "Transform the input to hours.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 08:00:45\nOutput: 8.0125 hours\nInput: 00:30:00\nOutput: 0.5 hours\nInput: 12:34:56\nOutput: 12.5822 hours"
  }
]