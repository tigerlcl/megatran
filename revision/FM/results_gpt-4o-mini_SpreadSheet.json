[
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-bikes.json",
    "input": "Ducati125",
    "output": "Ducati",
    "ground_truth": "Ducati",
    "is_correct": "True",
    "instruction": "Transform the input motorcycle model by retaining only the brand name, removing the numeric displacement designation. For example, \"Honda125\" becomes \"Honda.\"\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Honda125\nOutput: Honda\nInput: Honda250\nOutput: Honda\nInput: Honda550\nOutput: Honda"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-bikes.json",
    "input": "Ducati250",
    "output": "Ducati",
    "ground_truth": "Ducati",
    "is_correct": "True",
    "instruction": "Transform the input motorcycle model by retaining only the brand name, removing the numeric displacement designation. For example, \"Honda125\" becomes \"Honda.\"\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Honda125\nOutput: Honda\nInput: Honda250\nOutput: Honda\nInput: Honda550\nOutput: Honda"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-bikes.json",
    "input": "Ducati100",
    "output": "Ducati",
    "ground_truth": "Ducati",
    "is_correct": "True",
    "instruction": "Transform the input motorcycle model by retaining only the brand name, removing the numeric displacement designation. For example, \"Honda125\" becomes \"Honda.\"\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Honda125\nOutput: Honda\nInput: Honda250\nOutput: Honda\nInput: Honda550\nOutput: Honda"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-dr-name.json",
    "input": "Mariya Sergienko",
    "output": "Dr. Mariya",
    "ground_truth": "Dr. Mariya",
    "is_correct": "True",
    "instruction": "Transform names by prefixing \"Dr.\" to the first name, using only the first name from the input for the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Jan Kotas\nOutput: Dr. Jan\nInput: Andrew Cencici\nOutput: Dr. Andrew\nInput: Nancy FreeHafer\nOutput: Dr. Nancy"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-firstname.json",
    "input": "Jan Kotas",
    "output": "Jan",
    "ground_truth": "Jan",
    "is_correct": "True",
    "instruction": "Instruction: Extract the first name from a given full name, retaining only the first part before any spaces.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Nancy FreeHafer\nOutput: Nancy\nInput: Andrew Cencici\nOutput: Andrew\nInput: Mariya Sergienko\nOutput: Mariya"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-initials.json",
    "input": "Mariya Sergienko",
    "output": "M.S.",
    "ground_truth": "M.S.",
    "is_correct": "True",
    "instruction": "Transform names into initials by taking the first letter of the first name and the first letter of the last name, separated by a period.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Jan Kotas\nOutput: J.K.\nInput: Andrew Cencici\nOutput: A.C.\nInput: Nancy FreeHafer\nOutput: N.F."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-lastname.json",
    "input": "Mariya Sergienko",
    "output": "Sergienko",
    "ground_truth": "Sergienko",
    "is_correct": "True",
    "instruction": "Extract the last name from the full name provided, discarding all preceding first names and middle names.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Andrew Cencici\nOutput: Cencici\nInput: Nancy FreeHafer\nOutput: FreeHafer\nInput: Jan Kotas\nOutput: Kotas"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-2.json",
    "input": "Jan Kotas",
    "output": "Jan K.",
    "ground_truth": "Jan K.",
    "is_correct": "True",
    "instruction": "Transform full names into abbreviated formats by retaining the first name and the initial of the last name, separated by a period.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Mariya Sergienko\nOutput: Mariya S.\nInput: Nancy FreeHafer\nOutput: Nancy F.\nInput: Andrew Cencici\nOutput: Andrew C."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-3.json",
    "input": "Brendan Hage",
    "output": "B. Hage",
    "ground_truth": "B. Hage",
    "is_correct": "True",
    "instruction": "Transform names by abbreviating the first name to its initial followed by the full last name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lara Constable\nOutput: L. Constable\nInput: Bradford Lango\nOutput: B. Lango\nInput: Lakenya Edison\nOutput: L. Edison"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-3.json",
    "input": "Launa Withers",
    "output": "L. Withers",
    "ground_truth": "L. Withers",
    "is_correct": "True",
    "instruction": "Transform names by abbreviating the first name to its initial followed by the full last name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lara Constable\nOutput: L. Constable\nInput: Bradford Lango\nOutput: B. Lango\nInput: Lakenya Edison\nOutput: L. Edison"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-3.json",
    "input": "Rudolf Akiyama",
    "output": "R. Akiyama",
    "ground_truth": "R. Akiyama",
    "is_correct": "True",
    "instruction": "Transform names by abbreviating the first name to its initial followed by the full last name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lara Constable\nOutput: L. Constable\nInput: Bradford Lango\nOutput: B. Lango\nInput: Lakenya Edison\nOutput: L. Edison"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-4.json",
    "input": "Lakenya Edison",
    "output": "Edison- L.",
    "ground_truth": "Edison- L.",
    "is_correct": "True",
    "instruction": "Transform names by outputting the surname followed by the initial of the first name, separated by a hyphen.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Brendan Hage\nOutput: Hage- B.\nInput: Launa Withers\nOutput: Withers- L.\nInput: Bradford Lango\nOutput: Lango- B."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine-4.json",
    "input": "Rudolf Akiyama",
    "output": "Akiyama- R.",
    "ground_truth": "Akiyama- R.",
    "is_correct": "True",
    "instruction": "Transform names by outputting the surname followed by the initial of the first name, separated by a hyphen.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Brendan Hage\nOutput: Hage- B.\nInput: Launa Withers\nOutput: Withers- L.\nInput: Bradford Lango\nOutput: Lango- B."
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine.json",
    "input": "Lara Constable",
    "output": "Lara Constable",
    "ground_truth": "Lara Constable",
    "is_correct": "True",
    "instruction": "Combine the names while maintaining the original format; ensure no changes or alterations occur in the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lakenya Edison\nOutput: Lakenya Edison\nInput: Brendan Hage\nOutput: Brendan Hage\nInput: Launa Withers\nOutput: Launa Withers"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine.json",
    "input": "Bradford Lango",
    "output": "Bradford Lango",
    "ground_truth": "Bradford Lango",
    "is_correct": "True",
    "instruction": "Combine the names while maintaining the original format; ensure no changes or alterations occur in the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lakenya Edison\nOutput: Lakenya Edison\nInput: Brendan Hage\nOutput: Brendan Hage\nInput: Launa Withers\nOutput: Launa Withers"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-name-combine.json",
    "input": "Rudolf Akiyama",
    "output": "Rudolf Akiyama",
    "ground_truth": "Rudolf Akiyama",
    "is_correct": "True",
    "instruction": "Combine the names while maintaining the original format; ensure no changes or alterations occur in the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Lakenya Edison\nOutput: Lakenya Edison\nInput: Brendan Hage\nOutput: Brendan Hage\nInput: Launa Withers\nOutput: Launa Withers"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-1.json",
    "input": "938-242-504",
    "output": "242",
    "ground_truth": "242",
    "is_correct": "True",
    "instruction": "Extract the middle three digits from a hyphenated phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 118-980-214\nOutput: 980\nInput: 244-655-094\nOutput: 655\nInput: 981-424-843\nOutput: 424"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-1.json",
    "input": "623-599-749",
    "output": "599",
    "ground_truth": "599",
    "is_correct": "True",
    "instruction": "Extract the middle three digits from a hyphenated phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 118-980-214\nOutput: 980\nInput: 244-655-094\nOutput: 655\nInput: 981-424-843\nOutput: 424"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-1.json",
    "input": "308-916-545",
    "output": "916",
    "ground_truth": "916",
    "is_correct": "True",
    "instruction": "Extract the middle three digits from a hyphenated phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 118-980-214\nOutput: 980\nInput: 244-655-094\nOutput: 655\nInput: 981-424-843\nOutput: 424"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-10.json",
    "input": "+172 027-507-632",
    "output": "+172 (027) 507-632",
    "ground_truth": "+172 (027) 507-632",
    "is_correct": "True",
    "instruction": "Format phone numbers to display the country code followed by the area code in parentheses and the local number separated by spaces.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: +106 (769) 858-438\nInput: +72 001-050-856\nOutput: +72 (001) 050-856\nInput: +62 647-787-775\nOutput: +62 (647) 787-775"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-10.json",
    "input": "+6 775-969-238",
    "output": "+6 (775) 969-238",
    "ground_truth": "+6 (775) 969-238",
    "is_correct": "True",
    "instruction": "Format phone numbers to display the country code followed by the area code in parentheses and the local number separated by spaces.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: +106 (769) 858-438\nInput: +72 001-050-856\nOutput: +72 (001) 050-856\nInput: +62 647-787-775\nOutput: +62 (647) 787-775"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-10.json",
    "input": "+95 310-537-401",
    "output": "+95 (310) 537-401",
    "ground_truth": "+95 (310) 537-401",
    "is_correct": "True",
    "instruction": "Format phone numbers to display the country code followed by the area code in parentheses and the local number separated by spaces.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: +106 (769) 858-438\nInput: +72 001-050-856\nOutput: +72 (001) 050-856\nInput: +62 647-787-775\nOutput: +62 (647) 787-775"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-10.json",
    "input": "+83 973-757-831",
    "output": "+83 (973) 757-831",
    "ground_truth": "+83 (973) 757-831",
    "is_correct": "True",
    "instruction": "Format phone numbers to display the country code followed by the area code in parentheses and the local number separated by spaces.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: +106 (769) 858-438\nInput: +72 001-050-856\nOutput: +72 (001) 050-856\nInput: +62 647-787-775\nOutput: +62 (647) 787-775"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-2.json",
    "input": "938-242-504",
    "output": "504",
    "ground_truth": "504",
    "is_correct": "True",
    "instruction": "Extract the last three digits from the phone number format \"XXX-XXX-XXX\" as the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 094\nInput: 981-424-843\nOutput: 843\nInput: 308-916-545\nOutput: 545"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-2.json",
    "input": "623-599-749",
    "output": "749",
    "ground_truth": "749",
    "is_correct": "True",
    "instruction": "Extract the last three digits from the phone number format \"XXX-XXX-XXX\" as the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 094\nInput: 981-424-843\nOutput: 843\nInput: 308-916-545\nOutput: 545"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-2.json",
    "input": "118-980-214",
    "output": "214",
    "ground_truth": "214",
    "is_correct": "True",
    "instruction": "Extract the last three digits from the phone number format \"XXX-XXX-XXX\" as the output.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 094\nInput: 981-424-843\nOutput: 843\nInput: 308-916-545\nOutput: 545"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-3.json",
    "input": "830-941-991",
    "output": "(830) 941-991",
    "ground_truth": "(830) 941-991",
    "is_correct": "True",
    "instruction": "Transform the phone number from a standard format (XXX-XXX-XXX) to a more readable format by enclosing the area code in parentheses, like (XXX) XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: (244) 655-094\nInput: 938-242-504\nOutput: (938) 242-504\nInput: 118-980-214\nOutput: (118) 980-214"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-3.json",
    "input": "981-424-843",
    "output": "(981) 424-843",
    "ground_truth": "(981) 424-843",
    "is_correct": "True",
    "instruction": "Transform the phone number from a standard format (XXX-XXX-XXX) to a more readable format by enclosing the area code in parentheses, like (XXX) XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: (244) 655-094\nInput: 938-242-504\nOutput: (938) 242-504\nInput: 118-980-214\nOutput: (118) 980-214"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-3.json",
    "input": "308-916-545",
    "output": "(308) 916-545",
    "ground_truth": "(308) 916-545",
    "is_correct": "True",
    "instruction": "Transform the phone number from a standard format (XXX-XXX-XXX) to a more readable format by enclosing the area code in parentheses, like (XXX) XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: (244) 655-094\nInput: 938-242-504\nOutput: (938) 242-504\nInput: 118-980-214\nOutput: (118) 980-214"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-3.json",
    "input": "623-599-749",
    "output": "(623) 599-749",
    "ground_truth": "(623) 599-749",
    "is_correct": "True",
    "instruction": "Transform the phone number from a standard format (XXX-XXX-XXX) to a more readable format by enclosing the area code in parentheses, like (XXX) XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: (244) 655-094\nInput: 938-242-504\nOutput: (938) 242-504\nInput: 118-980-214\nOutput: (118) 980-214"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-4.json",
    "input": "118-980-214",
    "output": "118.980.214",
    "ground_truth": "118.980.214",
    "is_correct": "True",
    "instruction": "Transform phone numbers by replacing hyphens with periods while keeping the original digits intact.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 244.655.094\nInput: 308-916-545\nOutput: 308.916.545\nInput: 623-599-749\nOutput: 623.599.749"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-4.json",
    "input": "981-424-843",
    "output": "981.424.843",
    "ground_truth": "981.424.843",
    "is_correct": "True",
    "instruction": "Transform phone numbers by replacing hyphens with periods while keeping the original digits intact.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 244.655.094\nInput: 308-916-545\nOutput: 308.916.545\nInput: 623-599-749\nOutput: 623.599.749"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-4.json",
    "input": "938-242-504",
    "output": "938.242.504",
    "ground_truth": "938.242.504",
    "is_correct": "True",
    "instruction": "Transform phone numbers by replacing hyphens with periods while keeping the original digits intact.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 244-655-094\nOutput: 244.655.094\nInput: 308-916-545\nOutput: 308.916.545\nInput: 623-599-749\nOutput: 623.599.749"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-5.json",
    "input": "+106 769-858-438",
    "output": "106",
    "ground_truth": "106",
    "is_correct": "True",
    "instruction": "Extract the country code from international phone numbers by removing the leading \"+\" and any spaces or additional characters.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172\nInput: +95 310-537-401\nOutput: 95\nInput: +83 973-757-831\nOutput: 83"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-5.json",
    "input": "+6 775-969-238",
    "output": "6",
    "ground_truth": "6",
    "is_correct": "True",
    "instruction": "Extract the country code from international phone numbers by removing the leading \"+\" and any spaces or additional characters.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172\nInput: +95 310-537-401\nOutput: 95\nInput: +83 973-757-831\nOutput: 83"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-5.json",
    "input": "+62 647-787-775",
    "output": "62",
    "ground_truth": "62",
    "is_correct": "True",
    "instruction": "Extract the country code from international phone numbers by removing the leading \"+\" and any spaces or additional characters.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172\nInput: +95 310-537-401\nOutput: 95\nInput: +83 973-757-831\nOutput: 83"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-5.json",
    "input": "+72 001-050-856",
    "output": "72",
    "ground_truth": "72",
    "is_correct": "True",
    "instruction": "Extract the country code from international phone numbers by removing the leading \"+\" and any spaces or additional characters.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172\nInput: +95 310-537-401\nOutput: 95\nInput: +83 973-757-831\nOutput: 83"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-6.json",
    "input": "+83 973-757-831",
    "output": "973",
    "ground_truth": "973",
    "is_correct": "True",
    "instruction": "Extract the three digits following the country code and before the hyphen from each phone number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 647\nInput: +6 775-969-238\nOutput: 775\nInput: +172 027-507-632\nOutput: 027"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-6.json",
    "input": "+106 769-858-438",
    "output": "769",
    "ground_truth": "769",
    "is_correct": "True",
    "instruction": "Extract the three digits following the country code and before the hyphen from each phone number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 647\nInput: +6 775-969-238\nOutput: 775\nInput: +172 027-507-632\nOutput: 027"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-6.json",
    "input": "+72 001-050-856",
    "output": "001",
    "ground_truth": "001",
    "is_correct": "True",
    "instruction": "Extract the three digits following the country code and before the hyphen from each phone number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 647\nInput: +6 775-969-238\nOutput: 775\nInput: +172 027-507-632\nOutput: 027"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-6.json",
    "input": "+95 310-537-401",
    "output": "310",
    "ground_truth": "310",
    "is_correct": "True",
    "instruction": "Extract the three digits following the country code and before the hyphen from each phone number.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 647\nInput: +6 775-969-238\nOutput: 775\nInput: +172 027-507-632\nOutput: 027"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-7.json",
    "input": "+72 001-050-856",
    "output": "856",
    "ground_truth": "050",
    "is_correct": "False",
    "instruction": "Extract the last three digits of the numerical phone number, ignoring any country codes or other prefixes.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 787\nInput: +6 775-969-238\nOutput: 969\nInput: +106 769-858-438\nOutput: 858"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-7.json",
    "input": "+172 027-507-632",
    "output": "632",
    "ground_truth": "507",
    "is_correct": "False",
    "instruction": "Extract the last three digits of the numerical phone number, ignoring any country codes or other prefixes.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 787\nInput: +6 775-969-238\nOutput: 969\nInput: +106 769-858-438\nOutput: 858"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-7.json",
    "input": "+95 310-537-401",
    "output": "401",
    "ground_truth": "537",
    "is_correct": "False",
    "instruction": "Extract the last three digits of the numerical phone number, ignoring any country codes or other prefixes.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 787\nInput: +6 775-969-238\nOutput: 969\nInput: +106 769-858-438\nOutput: 858"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-7.json",
    "input": "+83 973-757-831",
    "output": "831",
    "ground_truth": "757",
    "is_correct": "False",
    "instruction": "Extract the last three digits of the numerical phone number, ignoring any country codes or other prefixes.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +62 647-787-775\nOutput: 787\nInput: +6 775-969-238\nOutput: 969\nInput: +106 769-858-438\nOutput: 858"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-8.json",
    "input": "+72 001-050-856",
    "output": "856",
    "ground_truth": "856",
    "is_correct": "True",
    "instruction": "Extract the last three digits of phone numbers from the given format, disregarding the country code and any preceding digits.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: 438\nInput: +95 310-537-401\nOutput: 401\nInput: +172 027-507-632\nOutput: 632"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-8.json",
    "input": "+6 775-969-238",
    "output": "238",
    "ground_truth": "238",
    "is_correct": "True",
    "instruction": "Extract the last three digits of phone numbers from the given format, disregarding the country code and any preceding digits.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: 438\nInput: +95 310-537-401\nOutput: 401\nInput: +172 027-507-632\nOutput: 632"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-8.json",
    "input": "+62 647-787-775",
    "output": "775",
    "ground_truth": "775",
    "is_correct": "True",
    "instruction": "Extract the last three digits of phone numbers from the given format, disregarding the country code and any preceding digits.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: 438\nInput: +95 310-537-401\nOutput: 401\nInput: +172 027-507-632\nOutput: 632"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-8.json",
    "input": "+83 973-757-831",
    "output": "831",
    "ground_truth": "831",
    "is_correct": "True",
    "instruction": "Extract the last three digits of phone numbers from the given format, disregarding the country code and any preceding digits.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +106 769-858-438\nOutput: 438\nInput: +95 310-537-401\nOutput: 401\nInput: +172 027-507-632\nOutput: 632"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-9.json",
    "input": "+83 973-757-831",
    "output": "83.973.757.831",
    "ground_truth": "83.973.757.831",
    "is_correct": "True",
    "instruction": "Remove the plus sign and hyphens from the phone numbers, replacing them with periods for a standardized dot-separated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172.027.507.632\nInput: +62 647-787-775\nOutput: 62.647.787.775\nInput: +72 001-050-856\nOutput: 72.001.050.856"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-9.json",
    "input": "+95 310-537-401",
    "output": "95.310.537.401",
    "ground_truth": "95.310.537.401",
    "is_correct": "True",
    "instruction": "Remove the plus sign and hyphens from the phone numbers, replacing them with periods for a standardized dot-separated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172.027.507.632\nInput: +62 647-787-775\nOutput: 62.647.787.775\nInput: +72 001-050-856\nOutput: 72.001.050.856"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-9.json",
    "input": "+6 775-969-238",
    "output": "6.775.969.238",
    "ground_truth": "6.775.969.238",
    "is_correct": "True",
    "instruction": "Remove the plus sign and hyphens from the phone numbers, replacing them with periods for a standardized dot-separated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172.027.507.632\nInput: +62 647-787-775\nOutput: 62.647.787.775\nInput: +72 001-050-856\nOutput: 72.001.050.856"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone-9.json",
    "input": "+106 769-858-438",
    "output": "106.769.858.438",
    "ground_truth": "106.769.858.438",
    "is_correct": "True",
    "instruction": "Remove the plus sign and hyphens from the phone numbers, replacing them with periods for a standardized dot-separated format.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: +172 027-507-632\nOutput: 172.027.507.632\nInput: +62 647-787-775\nOutput: 62.647.787.775\nInput: +72 001-050-856\nOutput: 72.001.050.856"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone.json",
    "input": "118-980-214",
    "output": "118",
    "ground_truth": "118",
    "is_correct": "True",
    "instruction": "Extract the first three digits from the given phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 938-242-504\nOutput: 938\nInput: 981-424-843\nOutput: 981\nInput: 244-655-094\nOutput: 244"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone.json",
    "input": "623-599-749",
    "output": "623",
    "ground_truth": "623",
    "is_correct": "True",
    "instruction": "Extract the first three digits from the given phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 938-242-504\nOutput: 938\nInput: 981-424-843\nOutput: 981\nInput: 244-655-094\nOutput: 244"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-phone.json",
    "input": "308-916-545",
    "output": "308",
    "ground_truth": "308",
    "is_correct": "True",
    "instruction": "Extract the first three digits from the given phone number in the format XXX-XXX-XXX.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: 938-242-504\nOutput: 938\nInput: 981-424-843\nOutput: 981\nInput: 244-655-094\nOutput: 244"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-reverse-name.json",
    "input": "Lara Constable",
    "output": "Constable Lara",
    "ground_truth": "Constable Lara",
    "is_correct": "True",
    "instruction": "Transform a full name by reversing the order of the first and last names, placing the last name first, followed by the first name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Brendan Hage\nOutput: Hage Brendan\nInput: Launa Withers\nOutput: Withers Launa\nInput: Bradford Lango\nOutput: Lango Bradford"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-reverse-name.json",
    "input": "Lakenya Edison",
    "output": "Edison Lakenya",
    "ground_truth": "Edison Lakenya",
    "is_correct": "True",
    "instruction": "Transform a full name by reversing the order of the first and last names, placing the last name first, followed by the first name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Brendan Hage\nOutput: Hage Brendan\nInput: Launa Withers\nOutput: Withers Launa\nInput: Bradford Lango\nOutput: Lango Bradford"
  },
  {
    "file_path": "/home/yangchenyu/megatran/data/DTT-test/SpreadSheet/FF-reverse-name.json",
    "input": "Rudolf Akiyama",
    "output": "Akiyama Rudolf",
    "ground_truth": "Akiyama Rudolf",
    "is_correct": "True",
    "instruction": "Transform a full name by reversing the order of the first and last names, placing the last name first, followed by the first name.\nOnly output the transformed result without any explanation.\n",
    "examples": "Examples:\nInput: Brendan Hage\nOutput: Hage Brendan\nInput: Launa Withers\nOutput: Withers Launa\nInput: Bradford Lango\nOutput: Lango Bradford"
  }
]